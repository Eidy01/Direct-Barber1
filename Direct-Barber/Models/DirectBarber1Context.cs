// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Direct_Barber.Models;

public partial class DirectBarber1Context : DbContext
{
    public DirectBarber1Context(DbContextOptions<DirectBarber1Context> options)
        : base(options)
    {
    }

    public virtual DbSet<MetodoPago> MetodoPagos { get; set; }

    public virtual DbSet<Rol> Rols { get; set; }

    public virtual DbSet<Solicitud> Solicituds { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<MetodoPago>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Metodo_p__3214EC07DF7CE141");

            entity.ToTable("Metodo_pago");

            entity.Property(e => e.Metodo).HasMaxLength(50);
        });

        modelBuilder.Entity<Rol>(entity =>
        {
            entity.ToTable("Rol");

            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Solicitud>(entity =>
        {
            entity.HasKey(e => e.IdSolicitud).HasName("PK__Solicitu__1E2B217808E3F90C");

            entity.ToTable("Solicitud");

            entity.Property(e => e.IdSolicitud).HasColumnName("id_Solicitud");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .HasColumnName("descripcion");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.IdBarbero).HasColumnName("id_Barbero");
            entity.Property(e => e.IdCliente).HasColumnName("id_Cliente");
            entity.Property(e => e.IdMetodoPago).HasColumnName("id_Metodo_pago");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio");

            entity.HasOne(d => d.IdBarberoNavigation).WithMany(p => p.SolicitudesComoBarbero)
                .HasForeignKey(d => d.IdBarbero)
                .HasConstraintName("FK__Solicitud__id_Ba__5FB337D6");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.SolicitudesComoCliente)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK__Solicitud__id_Me__5EBF139D");

            entity.HasOne(d => d.IdMetodoPagoNavigation).WithMany(p => p.Solicituds)
                .HasForeignKey(d => d.IdMetodoPago)
                .HasConstraintName("FK__Solicitud__id_Me__60A75C0F");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.Id);  // Definir la clave primaria

            entity.ToTable("Usuario");  // Nombre de la tabla en la base de datos

            // Configuración de las propiedades del Usuario
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .HasColumnName("nombre");

            entity.Property(e => e.Apellido)
                .HasMaxLength(50)
                .HasColumnName("apellido");

            entity.Property(e => e.Correo)
                .HasMaxLength(60)
                .IsRequired()    // El correo es obligatorio
                .HasColumnName("correo");

            entity.Property(e => e.Contrasena)
                .HasMaxLength(200)
                .IsRequired()    // La contraseña es obligatoria
                .HasColumnName("contrasena");

            entity.Property(e => e.Direccion)
                .HasMaxLength(50)
                .HasColumnName("direccion");

            entity.Property(e => e.Telefono)
                .HasMaxLength(20)
                .HasColumnName("telefono");

            entity.Property(e => e.FecNacimiento)
                .HasColumnType("date")
                .HasColumnName("fec_nacimiento");

            entity.Property(e => e.FecRegistro)
                .HasDefaultValueSql("(getdate())")  // Valor por defecto
                .HasColumnType("datetime")
                .HasColumnName("fec_registro");

            entity.Property(e => e.Calificacion)
                .HasColumnType("decimal(3, 2)")
                .HasColumnName("calificacion");

            entity.Property(e => e.Foto)
                .HasColumnType("varbinary(max)")
                .HasColumnName("foto");

            entity.Property(e => e.Documento)
                .HasMaxLength(10)
                .HasColumnName("documento");

            // Relación con la tabla Rol
            entity.HasOne(u => u.Rol)                    // Relación de uno a muchos
                .WithMany(r => r.Usuarios)               // Un Rol tiene muchos Usuarios
                .HasForeignKey(u => u.Id_Rol)            // Llave foránea
                .HasConstraintName("FK_Usuario_Rol");    // Nombre de la llave foránea
        });


        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}